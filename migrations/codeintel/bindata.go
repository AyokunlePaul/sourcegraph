// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 1000000001_lsif_data.down.sql (183B)
// 1000000001_lsif_data.up.sql (580B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1000000001_lsif_dataDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xc8\x29\xce\x4c\x8b\x4f\x49\x2c\x49\x8c\xcf\x4d\x2d\x49\x04\x31\xac\xb1\x4b\xa7\xe4\x27\x97\xe6\xa6\xe6\x95\x14\xe3\x90\x2f\x4a\x2d\x2e\xcd\x29\x89\x4f\xce\x28\xcd\xcb\xc6\xa5\x26\x25\x35\x2d\x33\x2f\xb3\x24\x33\x3f\x0f\xb7\x29\x69\xa9\x45\xa9\x79\xc9\xa9\xc5\xd6\x5c\x5c\xce\xfe\xbe\xbe\x9e\x21\xd6\x5c\x80\x00\x00\x00\xff\xff\x87\xc0\xbc\x0b\xb7\x00\x00\x00")

func _1000000001_lsif_dataDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1000000001_lsif_dataDownSql,
		"1000000001_lsif_data.down.sql",
	)
}

func _1000000001_lsif_dataDownSql() (*asset, error) {
	bytes, err := _1000000001_lsif_dataDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1000000001_lsif_data.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4b, 0x26, 0x37, 0x85, 0xe5, 0xe9, 0x2c, 0xa2, 0xb5, 0x5a, 0x31, 0xcc, 0xa8, 0xb0, 0x25, 0xc7, 0x1b, 0x6f, 0xa3, 0x28, 0x33, 0xf3, 0xb3, 0x39, 0xa7, 0xa7, 0xe9, 0x4a, 0xdd, 0x6, 0x70, 0x19}}
	return a, nil
}

var __1000000001_lsif_dataUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x8f\xc1\x4a\xc4\x30\x10\x86\xef\x79\x8a\x39\xba\xb0\x6f\xd0\x53\x77\x09\x52\xb4\x2a\xa5\x97\x3d\x85\x98\x4c\xe8\xe0\x66\xb6\x34\x13\xa8\x6f\x2f\x1a\x11\x5b\xb4\x7a\xda\xdb\x10\xf2\xff\xdf\xff\x1d\xf4\x6d\xf3\x50\x29\x75\xec\x74\xdd\x6b\xe8\xeb\xc3\xbd\x86\x73\xa2\x60\xbc\x15\x6b\x22\x8a\x7d\x3f\xe0\xc6\xe7\x38\x1a\xf2\x40\x2c\x7b\xe0\x1c\xcd\x84\x29\x9f\xc5\xb8\x21\xf3\x4b\x2a\xcf\x4f\x5d\xd3\xd6\xdd\x09\xee\xf4\xe9\x2b\xb0\xdb\x55\xbf\x95\xfb\x8b\xcb\x11\x59\xd2\xaa\x7d\xb4\x32\x80\xe0\x2c\x7b\xf8\x60\x3f\xbf\x0a\xda\x9f\xdb\xcb\xe7\x0d\xc6\x72\xe5\x92\x43\x7e\x2e\xc7\xdf\x14\xf2\xf3\x96\x08\x06\x62\x12\xba\xf0\x1a\x91\xdc\x80\x11\x3f\x65\xc8\x23\x0b\x05\xc2\xe9\xdf\x76\x25\xff\x3d\xba\xe9\x1a\x70\x42\x76\x78\x9d\x15\xea\xf8\xd8\xb6\x4d\x5f\xa9\xb7\x00\x00\x00\xff\xff\xa5\x85\x76\x31\x44\x02\x00\x00")

func _1000000001_lsif_dataUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1000000001_lsif_dataUpSql,
		"1000000001_lsif_data.up.sql",
	)
}

func _1000000001_lsif_dataUpSql() (*asset, error) {
	bytes, err := _1000000001_lsif_dataUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1000000001_lsif_data.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3b, 0x3b, 0x53, 0xe7, 0xb4, 0xa5, 0xf6, 0x5c, 0x98, 0xfe, 0x41, 0x4d, 0xf, 0xf7, 0x84, 0x22, 0x42, 0xb7, 0x12, 0x12, 0xc3, 0xd4, 0x8c, 0x39, 0xa0, 0xdd, 0xa2, 0xc9, 0x5d, 0x1c, 0xa, 0x8a}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1000000001_lsif_data.down.sql": _1000000001_lsif_dataDownSql,
	"1000000001_lsif_data.up.sql":   _1000000001_lsif_dataUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1000000001_lsif_data.down.sql": {_1000000001_lsif_dataDownSql, map[string]*bintree{}},
	"1000000001_lsif_data.up.sql":   {_1000000001_lsif_dataUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
